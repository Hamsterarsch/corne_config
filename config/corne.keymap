                                                                                                                                                                        /*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&led_strip {
    chain-length = <6>;
};

    &soft_off {
        hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {
    macros {
        ZMK_MACRO(mcr_AEc,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_OEc,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_UEc,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ss,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ae,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_oe,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ue,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>
                , <&macro_release &kp LALT>
                ;
        )
    };

     behaviors {
            td_shftl: tap_dance_shiftlock {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&sk LSHIFT>, <&kp CAPSLOCK>;
            };
            td_i: tap_dance_up {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&kp I>, <&kp I>, <&kp UP>;
            };
            td_j: tap_dance_left {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&kp J>, <&kp J>, <&kp LEFT>;
            };
            td_l: tap_dance_right {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&kp L>, <&kp L>, <&kp RIGHT>;
            };
            td_k: tap_dance_down {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <160>;
                bindings = <&kp K>, <&kp K>, <&kp DOWN>;
            };

            mod_AE: mod_AE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_ae>, <&mcr_AEc>;
                mods = <MOD_LSFT>;
            };

            mod_OE: mod_OE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_oe>, <&mcr_OEc>;
                mods = <MOD_LSFT>;
            };

            mod_UE: mod_UE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_ue>, <&mcr_UEc>;
                mods = <MOD_LSFT>;
            };

            tap_shft: shift_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&sk LSHFT>, <&kp CAPS>;
            };

            slash_imp: slash_impostor {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            dot_imp: dot_impostor {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            com_imp: comma_impostor {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            semi_imp: semicolon_impostor {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

            sqt_imp: sqt_impostor {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp AT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | TAB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CTRK |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | LGUI |
//                    |  L1 | SPC | SHFT|   | ALT | ENT  | L2 |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E     &kp R &kp T             &kp Y      &kp U   &kp I       &kp O     &kp P     &kp BSPC
   &sl 3     &kp A &kp S &kp D     &kp F &kp G             &kp H      &kp J   &kp K       &kp L     &semi_imp &sqt_imp
   &tap_shft &kp Z &kp X &kp C     &kp V &kp B             &kp N      &kp M   &slash_imp  &com_imp  &dot_imp  &kp LGUI
                   &sl 1 &kp SPACE &sk LCTRL               &kp TAB    &kp RET &sl 2
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
// | ALTR|  1  |  2  |  3  |  4  |  5  |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// |  M  | 6   | 7   | 8   |   9 |   0 |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                   |     |     |     |   | ALT |     |     |
                        bindings = <
   &trans    &kp EXCL &kp RA(Q) &kp BSLH  &kp DLLR  &kp PRCNT   &kp GRAVE &kp CARET &kp LBRC  &kp ASTRK &kp LPAR      &trans
   &kp LALT  &kp N1   &kp N2    &kp N3    &kp N4    &kp N5      &kp SLASH &kp RPAR  &kp RA(8) &kp RA(9) &kp RA(MINUS) &kp PLUS
   &kp M     &kp N6   &kp N7    &kp N8    &kp N9    &kp N0      &kp QMARK &kp RBKT  &kp RA(7) &kp RA(0) &kp RA(LT)    &kp RA(PLUS)
                                &trans    &kp SPACE &trans      &kp RALT  &kp RET   &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  OFF | ousb| oble|     |     |     |       |     | BSPC| UP  | DEL |     |      |
// |      |     |     |     |     |     |       | HOME|  LFT| DWN |  RGT|  END| DEL  |
// |      | BT1 | BT2 | BT3 |  BT4| BT5 |       |BTCLR|     |     |     |     |      |      
//                    |     |     |     |       |     |     |     |
                        bindings = <
   &soft_off    &out OUT_USB &out OUT_BLE &kp N3       &kp N4        &kp N5          &trans      &kp BSPC &kp UP    &kp DEL   &trans    &trans
   &kp RALT     &kp N6       &kp N7       &kp N8       &kp N9        &kp N0          &kp HOME    &kp LEFT &kp DOWN  &kp RIGHT &kp END   &kp DEL
   &trans       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_CLR  &trans   &trans    &trans    &trans    &trans
                                          &trans       &kp SPACE     &trans      &trans          &kp RET  &trans
                        >;
                };

                alt_layer {
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |     |   |     |  ue |     | oe  |     |      |
// |     |   ae|  ss |     |     |     |   |     |     |     |     |     |      |
// |     |     |     |     |     |     |   |     |     |     |     |     |      |
//                   |     |     |     |   |     |     |     |
                        bindings = <
   &trans &trans   &trans    &trans    &trans    &trans      &trans &kp LBKT &trans  &kp SEMI &trans  &trans
   &trans &kp SQT  &kp MINUS &trans    &trans    &trans      &trans &trans   &trans  &trans   &trans  &trans
   &kp F1 &kp F2   &kp F3    &kp F4    &kp F5    &kp F6      &kp F7 &kp F8   &kp F9  &kp F10  &kp F11 &kp F12
                             &trans    &trans    &trans      &trans &trans   &trans
                        >;
                };
        };
};



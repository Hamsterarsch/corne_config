/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&led_strip {
    chain-length = <6>;
};

    &soft_off {
        hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {
    macros {
        ZMK_MACRO(mcr_AEc,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_OEc,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_UEc,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ss,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ae,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_oe,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ue,
            wait-ms = <30>;
            tap-ms = <30>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>
                , <&macro_release &kp LALT>
                ;
        )
    };

     behaviors {
            td_shftl: tap_dance_shiftlock {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&sk LSHIFT>, <&kp CAPSLOCK>;
            };
            td_i: tap_dance_up {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp I>, <&kp UP>;
            };
            td_j: tap_dance_left {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp J>, <&kp LEFT>;
            };
            td_l: tap_dance_right {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp L>, <&kp RIGHT>;
            };
            td_k: tap_dance_down {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp K>, <&kp DOWN>;
            };

            mod_AE: mod_AE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_ae>, <&mcr_AEc>;
                mods = <MOD_LSFT>;
            };

            mod_OE: mod_OE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_oe>, <&mcr_OEc>;
                mods = <MOD_LSFT>;
            };

            mod_UE: mod_UE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_ue>, <&mcr_UEc>;
                mods = <MOD_LSFT>;
            };

            ht_shft: shift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&sk>, <&kp>;
            };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | TAB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CTRK |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | LGUI |
//                    |  L1 | SPC | SHFT|   | ALT | ENT  | L2 |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E     &kp R &kp T             &kp Z      &kp U   &td_i     &kp O     &kp P    &kp BSPC
   &sl 3     &kp A &kp S &kp D     &kp F &kp G             &kp H      &td_j   &td_k     &td_l     &kp SEMI &kp SQT
   &sk LCTRL &kp Y &kp X &kp C     &kp V &kp B             &kp N      &kp M   &kp FSLH  &kp COMMA &kp DOT  &kp LGUI
                   &sl 1 &kp SPACE &ht_shft LSHIFT LSHIFT  &kp TAB    &kp RET &sl 2
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
// | ALTR|  1  |  2  |  3  |  4  |  5  |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// |  M  | 6   | 7   | 8   |   9 |   0 |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                   |     |     |     |   | ALT |     |     |
                        bindings = <
   &trans &kp EXCL &kp AT &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &trans
   &kp RALT  &kp N1   &kp N2 &kp N3    &kp N     &kp N5      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp M     &kp N6   &kp N7 &kp N8    &kp N9    &kp N0      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                          &trans    &kp SPACE &trans      &kp RALT  &kp RET   &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  OFF |     |     |     |     |     |   |     | BSPC| UP  | DEL |     |      |
// |      |     |     |     |     |     |   | HOME|  LFT| DWN |  RGT|  END| DEL  |
// | BTCLR| BT1 | BT2 | BT3 |     |     |   |     |     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &soft_off    &kp N1       &kp N2       &kp N3       &kp N4        &kp N5          &trans   &kp BSPC &kp UP    &kp DEL   &trans    &trans
   &kp RALT     &kp N6       &kp N7       &kp N8       &kp N9        &kp N0          &kp HOME &kp LEFT &kp DOWN  &kp RIGHT &kp END   &kp DEL
   &&bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &&bt BT_SEL 3 &bt BT_SEL 4    &trans   &trans   &trans    &trans    &trans    &trans
                                          &trans       &kp SPACE     &trans          &trans   &kp RET  &trans
                        >;
                };

                alt_layer {
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |     |   |     |  ue |     | oe  |     |      |
// |     |   ae|  ss |     |     |     |   |     |     |     |     |     |      |
// |     |     |     |     |     |     |   |     |     |     |     |     |      |
//                   |     |     |     |   |     |     |     |
                        bindings = <
   &trans &trans   &trans  &trans    &trans    &trans      &trans &mod_UE &trans  &mod_OE &trans &trans
   &trans &mod_AE  &mcr_ss &trans    &trans    &trans      &trans &trans  &trans  &trans  &trans &trans
   &trans &trans   &trans  &trans    &trans    &trans      &trans &trans  &trans  &trans  &trans &trans
                           &trans    &trans    &trans      &trans &trans  &trans
                        >;
                };
        };
};



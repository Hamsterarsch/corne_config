/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&led_strip {
    chain-length = <6>;
};

    &soft_off {
        hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {
    macros {
        ZMK_MACRO(mcr_AEc,
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_OEc,
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_UEc,
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ss,
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ae,
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_oe,
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6>
                , <&macro_release &kp LALT>
                ;
        )

        ZMK_MACRO(mcr_ue,
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>
                , <&macro_release &kp LALT>
                ;
        )
    };

     behaviors {
            td_shftl: tap_dance_shiftlock {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&sk LSHIFT>, <&kp CAPSLOCK>;
            };
            td_k: tap_dance_k_up {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp K>, <&kp UP>;
            };
            td_m: tap_dance_m_left {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp M>, <&kp LEFT>;
            };
            td_dot: tap_dance_dot_right {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp DOT>, <&kp RIGHT>;
            };
            td_comma: tap_dance_comma_down {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp COMMA>, <&kp DOWN>;
            };

            td_comma: mod_AE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_ae>, <&mcr_AEc>;
                mods = <MOD_LSFT>;
            };

            td_comma: mod_OE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_oe>, <&mcr_OEc>;
                mods = <MOD_LSFT>;
            };

            td_comma: mod_OE {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&mcr_oe>, <&mcr_OEc>;
                mods = <MOD_LSFT>;
            };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | TAB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CTRK |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | LGUI |
//                    |  L1 | SPC | SHFT|   | ALT | ENT  | L2 |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E     &kp R &kp T     &kp Z      &kp U   &kp I     &kp O   &kp P    &kp BSPC
   &kp TAB   &kp A &kp S &kp D     &kp F &kp G     &kp H      &kp J   &td_k     &kp L   &kp SEMI &kp SQT
   &kp LCTRL &kp Y &kp X &kp C     &kp V &kp B     &kp N      &td_m   &td_comma &td_dot &kp FSLH &kp LGUI
                   &sl 1 &kp SPACE &sk LSHIFT      &lt 3 LALT &kp RET &sl 2
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  OFF |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |      |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |     |     |  UP |     |     | DEL  |
// |      |     |     |     |  M  | ESC |   |HOME | LFT | DWN | RHT | END |      |
//                    |     |     |     |   |  ALT|     |     |
                        bindings = <
   &soft_off  &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8    &kp N9    &kp N0   &trans
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans   &trans   &kp UP    &trans    &trans   &kp DEL
   &trans     &trans       &trans       &trans       &kp M        &kp ESC        &kp HOME &kp LEFT &kp DOWN  &kp RIGHT &kp END  &trans
                                        &trans       &kp SPACE    &trans         &kp RALT &kp RET  &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
// |     |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// |     |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                   |     |     |     |   | ALT |     |     |
                        bindings = <
   &trans &kp EXCL &kp AT &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &trans
   &trans &trans   &trans &trans    &trans    &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &trans &trans   &trans &trans    &trans    &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                          &trans    &kp SPACE &trans      &kp RALT  &kp RET   &trans
                        >;
                };

                alt_layer {
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |     |   |     |     |     |     |     |      |
// |     |     |     |     |     |     |   |     |     |     |     |     |      |
// |     |     |     |     |     |     |   |     |     |     |     |     |      |
//                   |     |     |     |   |     |     |     |
                        bindings = <
   &trans &trans   &trans  &trans    &trans    &trans      &trans &mod_UE &trans  &mod_OE &trans &trans
   &trans &mod_AE  &mcr_ss &trans    &trans    &trans      &trans &trans  &trans  &trans  &trans &trans
   &trans &trans   &trans  &trans    &trans    &trans      &trans &trans  &trans  &trans  &trans &trans
                           &trans    &trans    &trans      &trans &trans  &trans
                        >;
                };
        };
};


